# 7 8
# 1 2 1 3 2 4 2 5 4 6 5 6 6 7 3 7

v,e = map(int(input().split()))
arr = list(map(int,input().split()))
adjm = [[0]*(v+1) for _ in range(v+1)]
adjL = [[] for _ in range(v+1)]

#인접행렬
for i in range(e):
    v1, v2 = arr[i*2],arr[i*2+1]
    adjm[v1][v2] = 1
    adjm[v2][v1] = 1
#인접행렬에서 행렬의 값에는 각 노드들 사이의 거리를 저장
# 인접행렬 방식은 노드의 개수가 많을 수록 메모리낭비 심함
graph = [
    [0,7,5],
    [7,0,inf],
    [5,inf,0]
]

#인접 리스트
# 메모리를 효율적으로 사용, 단 특정한 두노드가 연결되어있는지에 대한 정보획득이 느림(데이터를 하나하나 확인해야해서)
# 하지만 특정노드와 연결된 모든 인접노드를 순회할 때에는 인접리스트 방식이 메모리공간 낭비가 적음
for i in range(e):
    v1,v2 = arr[i*2], arr[i*2+1]
    adjL[v1] = v2
    adjL[v2] = v1
#인접 리스트에서 연결된 노드들의 정보 저장 (노드,거리)
#거리는 저장안해도 가능
#읽는법 graph의 인덱스와 ()안의 첫 인덱스값이 서로 연결된것
graph = [
    [],
    [(1,7), (2,5)],
    [(0,7)],
    [(0,5)].
]

